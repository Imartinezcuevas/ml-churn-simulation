services:
  kafka:
    image: confluentinc/cp-kafka:8.1.0
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
      - "9093:9093"

  kafka-init:
    image: confluentinc/cp-kafka:8.1.0
    depends_on:
      - kafka
    entrypoint: >
      bash -c "
        until kafka-topics --bootstrap-server kafka:9092 --list >/dev/null 2>&1; do
          sleep 1
        done &&
        kafka-topics --create --if-not-exists --topic signups_topic --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic activity_topic --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic support_topic --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic billing_topic --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1
      "
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: churn_db
    ports:
      - "5432:5432"
    volumes:
      - ./docker/init_db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d churn_db"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/etc/grafana/dashboards